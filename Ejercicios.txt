apt-get update
apt-get install     apt-transport-https     ca-certificates     curl     software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository    "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
apt-get update
apt-get install docker-ce
usermod -aG docker linux

Ejercicio 2: Construye una jaula en la que tan sólo puedan ejecutarse los comandos bash, ls, ps, mount y mkdir
#!/bin/bash

which=$(which $1)
mkdir -p $2/$(dirname $which)
cp $which $2/$which
ldd $which | grep "/"  | cut -d ">" -f2 | cut -d"(" -f1 | tr -d " \t" | while read linea;
do
    mkdir -p $2$(dirname $linea)
    cp $linea $2$linea
done

Ejercicio 3: Edita tu sources.list.d/ para añadir los repositorios de la última versión de firefox, grafana.
Si necesitas refuerzo en shellscripting o quieres hacer más cosas,  haz en casa un shellscript "volcador" de datos de DNS o bien un identificador de errores en red.* pregunta al profe

Propuesta de proyecto personal chulo de bootstrapping decente:

    3)  Crea un script de bootstrapping que pueda descargar un archivo  especificado en una variable de entorno y desplegarlo en la raíz del  servidor web. Con ello conseguiremos un contenedor "wildcard" que nos  permita ejecutar cualquier app PHP+MySQL+1+1+1

    Que soporte el desempaquetado de:

    tar.gz

    tar.bz2

    tar.xz

    zip

    git

Si necesitas refuerzo en shellscripting o quieres hacer más cosas,  haz en casa un shellscript "volcador" de datos de DNS o bien un identificador de errores en red.* pregunta al profe

Lanza: ubuntu, centos, debian, php:apache
Utiliza "-d" para lo que sean servicios.
Utiliza ctrl +PQ para desconectar de un contenedor sin finalizarlo
Reconecta a un contenedor ( docker attach )
Ejecuta un binario dentro de un contenedor en ejecución ( docker exec )
Busca una plataforma/aplicación compleja y lánzala con Docker

    docker run

    -d daemon

    -t terminal

    -i interactive

    -p puertoexterior:puertodocker

    -v /ruta/local;/ruta/dentro/docker

    --name nombrecontenedor

apt install bridge-utils

ip addr show dev eno1
2: eno1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 88:51:fb:53:54:be brd ff:ff:ff:ff:ff:ff
    inet 192.168.5.1/24 brd 192.168.5.255 scope global eno1
       valid_lft forever preferred_lft forever
    inet6 fe80::2e55:f6a1:20dc:f2aa/64 scope link 
       valid_lft forever preferred_lft forever
ip addr del 192.168.5.1/24 dev eno1
docker network create --attachable [ --driver bridge ] --subnet 192.168.5.1/24 --ip-range 192.168.5.24/30 mibridge
brctl show

# Lanzamos un contenedor de mysql
docker run -d --name mysql -e MYSQL_RANDOM_ROOT_PASSWORD=yes -e MYSQL_DATABASE=wordpress -e MYSQL_USER=wordpress -e MYSQL_PASSWORD=wordpresito library/mysql

# Validamos que conecta:
mysql -uwordpress -pwordpresito -h$(docker inspect mysql -f '{{.NetworkSettings.IPAddress}}') wordpress

# Lanzamos la imágen oficial de wordpress:
docker run --name some-wordpress -e WORDPRESS_DB_USER=wordpress -e WORDPRESS_DB_PASSWORD=wordpresito --link mysql:mysql -p 8080:80 -d wordpress

----------------------------------------------------------------------------------
DOCKER COMPOSE:

version: '2'

services:
  worker:
    image: jordan0day/folding-at-home
  webito:
    image: library/httpd
    ports:
      - 80

